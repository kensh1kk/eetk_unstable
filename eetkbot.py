from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from collect_data_weekly import collect_data_weekly
from collect_data_daily import collect_data_daily
from collect_kitties import collect_kitty
import asyncio

bot = Bot(token='5085326595:AAGVsDbtRcsj4at6haoV10d5_vSnBoaeNqg', parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


# 5068878742:AAEB6rC4kEmngswkQS6n31fAVR3szf7NshE glavniy
# 5085326595:AAGVsDbtRcsj4at6haoV10d5_vSnBoaeNqg testoviy

# 760196701 author

@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å', '–í—Ç–æ—Ä–æ–π –∫—É—Ä—Å', '–¢—Ä–µ—Ç–∏–π –∫—É—Ä—Å', '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫—É—Ä—Å']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for start_button in start_buttons:
        keyboard.add(start_button)
    await message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å', reply_markup=keyboard)


@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤'))
async def comeback(message: types.Message):
    start_buttons = ['–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å', '–í—Ç–æ—Ä–æ–π –∫—É—Ä—Å', '–¢—Ä–µ—Ç–∏–π –∫—É—Ä—Å', '–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫—É—Ä—Å']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for start_button in start_buttons:
        keyboard.add(start_button)
    await message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å', reply_markup=keyboard)


@dp.message_handler(commands=['join'])
async def join(message: types.Message):
    current_user_id = message.from_user.id
    with open('user_id.txt') as file:
        user_id = [line.strip() for line in file]

    if str(current_user_id) in user_id:
        await message.answer('–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!')
    else:
        await message.answer('–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üòä\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ /leave')
        user_id.append(current_user_id)

    with open("user_id.txt", "w") as file:
        for user in user_id:
            print(user, file=file)


@dp.message_handler(commands=['leave'])
async def leave(message: types.Message):
    current_user_id = message.from_user.id
    with open('user_id.txt') as file:
        user_id = [line.strip() for line in file]

    try:
        user_id.remove(str(current_user_id))
        await message.answer('–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ü•∫')
    except ValueError:
        await message.answer('–ù–æ –≤–µ–¥—å —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ!')

    with open("user_id.txt", "w") as file:
        for user in user_id:
            print(user, file=file)


@dp.message_handler(commands=['spisok'])
async def spisok(message: types.Message):
    with open('user_id.txt') as file:
        user_id = [line.strip() for line in file]

    for i in range(len(user_id)):
        await message.answer(f'{user_id[i]}')


@dp.message_handler(commands=['preload'])
async def spisok(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_daily()
    course = 1
    for course in range(1, 5):
        await asyncio.sleep(2)
        try:
            collect_data_weekly(course)
            await message.answer(f'{course} –∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω üôÉ')
        except:
            await message.answer(f'–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å —Å {course} –∫—É—Ä—Å–æ–º :(')


@dp.message_handler(Text(equals='–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å'))
async def first_course_is_selected(message: types.Message):
    first_course = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏—è']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*first_course)
    keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤')
    await message.answer('–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


@dp.message_handler(Text(equals='–í—Ç–æ—Ä–æ–π –∫—É—Ä—Å'))
async def second_course_is_selected(message: types.Message):
    second_course = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏—è']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*second_course)
    keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤')
    await message.answer('–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


@dp.message_handler(Text(equals='–¢—Ä–µ—Ç–∏–π –∫—É—Ä—Å'))
async def third_course_is_selected(message: types.Message):
    third_course = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –∫—É—Ä—Å–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏—è']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*third_course)
    keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤')
    await message.answer('–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


@dp.message_handler(Text(equals='–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫—É—Ä—Å'))
async def fourth_course_is_selected(message: types.Message):
    fourth_course = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∫—É—Ä—Å–∞', '–ò–∑–º–µ–Ω–µ–Ω–∏—è']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*fourth_course)
    keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤')
    await message.answer('–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


@dp.message_handler(Text(equals='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞'))
async def get_data_weekly_first(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_weekly(1)
    with open('texts/schedules.txt') as file:
        schedule = [line.strip() for line in file]
    with open('texts/schedules_names.txt') as file:
        schedule_name = [line.strip() for line in file]

    for i in range(len(schedule)):
        part = schedule[i].rpartition('/')[-1]
        await message.answer_document(
            open(f'pdfs/{part}.pdf', 'rb'),
            caption=f'{schedule_name[i]}')
        await asyncio.sleep(0.5)


@dp.message_handler(Text(equals='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞'))
async def get_data_weekly_second(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_weekly(2)
    with open('texts/schedules.txt') as file:
        schedule = [line.strip() for line in file]
    with open('texts/schedules_names.txt') as file:
        schedule_name = [line.strip() for line in file]

    for i in range(len(schedule)):
        part = schedule[i].rpartition('/')[-1]
        await message.answer_document(
            open(f'pdfs/{part}.pdf', 'rb'),
            caption=f'{schedule_name[i]}')
        await asyncio.sleep(0.5)


@dp.message_handler(Text(equals='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –∫—É—Ä—Å–∞'))
async def get_data_weekly_third(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_weekly(3)
    with open('texts/schedules.txt') as file:
        schedule = [line.strip() for line in file]
    with open('texts/schedules_names.txt') as file:
        schedule_name = [line.strip() for line in file]

    for i in range(len(schedule)):
        part = schedule[i].rpartition('/')[-1]
        await message.answer_document(
            open(f'pdfs/{part}.pdf', 'rb'),
            caption=f'{schedule_name[i]}')
        await asyncio.sleep(0.5)


@dp.message_handler(Text(equals='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∫—É—Ä—Å–∞'))
async def get_data_weekly_fourth(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_weekly(4)
    with open('texts/schedules.txt') as file:
        schedule = [line.strip() for line in file]
    with open('texts/schedules_names.txt') as file:
        schedule_name = [line.strip() for line in file]

    for i in range(len(schedule)):
        part = schedule[i].rpartition('/')[-1]
        await message.answer_document(
            open(f'pdfs/{part}.pdf', 'rb'),
            caption=f'{schedule_name[i]}')
        await asyncio.sleep(0.5)


@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–µ–Ω–∏—è'))
async def get_data_daily(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∫–∞. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ')

    collect_data_daily()
    with open('texts/changes.txt') as file:
        changes = [line.strip() for line in file]
    with open('texts/changes_names.txt') as file:
        changes_names = [line.strip() for line in file]
    with open('texts/temp_formats.txt') as file:
        temp_formats = [line.strip() for line in file]

    counter = -1
    for change in changes:
        counter += 1
        await asyncio.sleep(0.5)
        if 'cloud.mail.ru' in change:
            part = changes[counter].rpartition('/')[-1]
            if temp_formats[counter] == 'pdf':
                await message.answer_document(
                    open(f'pdfs/{part}.pdf', 'rb'),
                    caption=f'{changes_names[counter]}')
            elif temp_formats[counter] == 'jpg':
                await message.answer_document(
                    open(f'pdfs/{part}.jpg', 'rb'),
                    caption=f'{changes_names[counter]}')
            elif temp_formats[counter] == 'png':
                await message.answer_document(
                    open(f'pdfs/{part}.png', 'rb'),
                    caption=f'{changes_names[counter]}')
        else:
            await message.answer_document(
                open(f'pdfs/{changes_names[counter]}.pdf', 'rb'),
                caption=f'{changes_names[counter]}')


@dp.message_handler(Text(equals='–ú–∏–ª—ã–π –∫–æ—Ç–∏–∫'))
async def get_kitty(message: types.Message):
    collect_kitty()
    await message.answer_photo(
        open('cats/kitty.jpg', 'rb'))


def main():
    executor.start_polling(dp)


if __name__ == '__main__':
    main()
